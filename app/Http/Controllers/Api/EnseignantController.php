<?php
namespace App\Http\Controllers\Api;
use App\Http\Controllers\Controller; use App\Models\Enseignant; use App\Models\Lecon; use App\Models\Matiere;
use Illuminate\Http\Request; use Illuminate\Http\JsonResponse; use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule; use Illuminate\Support\Facades\Log;

class EnseignantController extends Controller {
    public function index(): JsonResponse { try { $enseignants = Enseignant::orderBy('nom')->get(['id', 'nom', 'telephone', 'commentaires']); return response()->json($enseignants); } catch (\Exception $e) { Log::error("Err index Ens: " . $e->getMessage()); return response()->json(['error' => 'Err load ens.'], 500); } }
    public function store(Request $request): JsonResponse { $validatedData = $request->validate(['nom' => 'required|string|max:150', 'telephone' => ['nullable','string','max:20', Rule::unique('enseignants', 'telephone')], 'commentaires' => 'nullable|string', 'matiere_principale_id' => 'required|integer|exists:matieres,id']); try { $enseignant = Enseignant::create($validatedData); $enseignant->load('matierePrincipale:id,nom'); return response()->json($enseignant, 201); } catch (\Exception $e) { Log::error("Err store Ens: " . $e->getMessage()); return response()->json(['error' => 'Err création ens.'], 500); } }
    public function show(Enseignant $enseignant): JsonResponse { try { $enseignant->load('matierePrincipale:id,nom'); return response()->json($enseignant); } catch (\Exception $e) { Log::error("Err show Ens {$enseignant->id}: " . $e->getMessage()); return response()->json(['error' => 'Err load ens.'], 500); } }
    public function update(Request $request, Enseignant $enseignant): JsonResponse { $validatedData = $request->validate(['nom' => 'required|string|max:150', 'telephone' => ['nullable','string','max:20', Rule::unique('enseignants', 'telephone')->ignore($enseignant->id)], 'commentaires' => 'nullable|string', 'matiere_principale_id' => 'required|integer|exists:matieres,id']); try { $enseignant->update($validatedData); $enseignant->load('matierePrincipale:id,nom'); return response()->json($enseignant); } catch (\Exception $e) { Log::error("Err update Ens {$enseignant->id}: " . $e->getMessage()); return response()->json(['error' => 'Err màj ens.'], 500); } }
    public function destroy(Enseignant $enseignant): JsonResponse { try { $enseignant->delete(); return response()->json(['message' => 'Enseignant supprimé.'], 200); } catch (\Exception $e) { Log::error("Err destroy Ens {$enseignant->id}: " . $e->getMessage()); return response()->json(['error' => 'Err suppression.'], 500); } }
    public function leconsPlanifiables(Enseignant $enseignant): JsonResponse { try { $matiereId = $enseignant->matiere_principale_id; if (!$matiereId) return response()->json([]); $lecons = Lecon::whereIn('statut', ['torecord', 'redo'])->whereHas('chapitre.matiere', fn($q) => $q->where('id', $matiereId))->with(['chapitre:id,nom,matiere_id', 'chapitre.matiere:id,nom,classe_id', 'chapitre.matiere.classe:id,nom'])->orderBy('chapitre_id')->orderByRaw("CAST(REGEXP_SUBSTR(num, '^[0-9]+') AS UNSIGNED), REGEXP_SUBSTR(num, '[^0-9].*$'), num ASC, id ASC")->select('id', 'num', 'titre', 'chapitre_id')->get(); Log::debug("Leçons planifiables V3 pour {$enseignant->id}: ", $lecons->toArray()); return response()->json($lecons); } catch (\Exception $e) { Log::error("Err leconsPlanifiables V3 {$enseignant->id}: " . $e->getMessage()); return response()->json(['error' => 'Impossible charger leçons.'], 500); } }
}