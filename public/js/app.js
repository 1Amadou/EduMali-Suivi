// ==========================================================================
// Fichier: /public/js/app.js
// Description: Logique JavaScript Frontend - EduMali Suivi P√©dagogique (Laravel Version - RESTful API)
// Version: FINALE Compl√®te - Post-Peaufinage 1
// Date: 2025-04-12
// ==========================================================================

document.addEventListener('DOMContentLoaded', () => {

    console.log("EduMali Suivi P√©dagogique - JavaScript Initialis√© (Laravel RESTful).");

    // ==========================================================
// === DOM √âL√âMENTS GLOBAUX ===
// ==========================================================
const globalAlertContainer = document.getElementById('global-alert-container');
const navLinks = document.querySelectorAll('.nav-link');
const contentSections = document.querySelectorAll('.content-section');
// Enseignants
const teacherForm = document.getElementById('teacher-form');
const teacherList = document.getElementById('teacher-list');
const teacherFormTitle = document.getElementById('teacher-form-title');
const saveTeacherBtn = document.getElementById('save-teacher-btn');
const cancelTeacherBtn = document.getElementById('cancel-teacher-btn');
const teacherIdInput = document.getElementById('teacher-id');
const teacherMatiereSelect = document.getElementById('teacher-matiere-principale');
// Emplois du Temps
const selectTeacherSchedule = document.getElementById('select-teacher-schedule');
const teacherTimetableContainer = document.getElementById('teacher-timetable-container');
const printTimetableButton = document.getElementById('print-timetable-btn');
const resetTimetableButton = document.getElementById('reset-timetable-btn');
// Structure
const classesStructureContainer = document.getElementById('classes-structure-container');
// Planning
const planningForm = document.getElementById('planning-form');
const planTeacherSelect = document.getElementById('plan-teacher');
const planLessonSelect = document.getElementById('plan-lesson-select');
const planLessonDetailsDiv = document.getElementById('plan-lesson-details');
const planLessonDescInput = document.getElementById('plan-lesson-desc');
const planSubmitButton = planningForm ? planningForm.querySelector('button[type="submit"]') : null;
const viewPlanningDateInput = document.getElementById('view-planning-date');
const studioPlanningView = document.getElementById('studio-planning-view');
// Feuille de Route
const selectClasseRoute = document.getElementById('select-classe-route');
const generateRouteBtn = document.getElementById('generate-route-btn');
const generateBlankBtn = document.getElementById('generate-blank-route-btn');
const saveChangesBtn = document.getElementById('save-route-changes-btn');
const printFdrBtn = document.getElementById('print-route-btn');
const routeContent = document.getElementById('feuille-route-content');
// Accueil / Dashboard --- V√âRIFIER CES LIGNES ---
const dashboardContent = document.getElementById('dashboard-content');
const loadingIndicator = document.getElementById('dashboard-loading'); // <-- Doit √™tre l√†
const statsContainer = document.getElementById('dashboard-stats-container'); // <-- Doit √™tre l√†
const leconsContainer = document.getElementById('dashboard-lecons-container'); // <-- Doit √™tre l√†
const planningContainer = document.getElementById('dashboard-planning-container'); // <-- Doit √™tre l√†


    // ==========================================================
    // === VARIABLES GLOBALES & CONFIG ===
    // ==========================================================
    const statusOptions = [ { value: 'torecord', text: 'üîú √Ä enregistrer' }, { value: 'editing', text: 'üîÑ En montage' }, { value: 'review', text: 'üü° √Ä revoir' }, { value: 'validated', text: '‚úÖ Valid√©e' }, { value: 'redo', text: '‚ùå √Ä refaire' }];
    let localTeacherCache = [];
    let allMatieresCache = [];
    let currentStructureCache = null;
    let currentTeacherSchedule = {};
    let saveTimeout = null;

    // ==========================================================
    // === FONCTIONS UTILITAIRES ===
    // ==========================================================
    function showAlert(message, type = 'info', container = globalAlertContainer) { if (!container) { console.warn("Conteneur d'alerte non trouv√©:", container); return; } try { const alertDiv = document.createElement('div'); alertDiv.className = `alert-message alert-${type} p-4 mb-4 border rounded text-sm shadow`; switch (type) { case 'success': alertDiv.classList.add('bg-green-100', 'border-green-300', 'text-green-800'); break; case 'error': alertDiv.classList.add('bg-red-100', 'border-red-300', 'text-red-800'); break; case 'warning': alertDiv.classList.add('bg-yellow-100', 'border-yellow-300', 'text-yellow-800'); break; case 'info': default: alertDiv.classList.add('bg-sky-100', 'border-sky-300', 'text-sky-800'); } alertDiv.textContent = message; container.innerHTML = ''; container.appendChild(alertDiv); setTimeout(() => { if (alertDiv.parentNode === container && alertDiv.textContent === message) { container.innerHTML = ''; } }, 6000); } catch(e) { console.error("Erreur dans showAlert:", e); } }
    function clearGlobalAlert() { if (globalAlertContainer) globalAlertContainer.innerHTML = ''; }
    function escapeJsString(str) { if (str === null || typeof str === 'undefined') return ''; return String(str).replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/`/g, "\\`"); }
    async function handleApiResponse(response) { const clone = response.clone(); try { const data = await response.json(); if (!response.ok) { let errorMsg = `Erreur ${response.status}`; if(data) { if (data.message) errorMsg = data.message; if (data.error) errorMsg = data.error; if (data.errors) { let validationErrors = Object.values(data.errors).map(errArray => errArray.join(', ')).join(' '); errorMsg = `Validation: ${validationErrors}`; } } throw new Error(errorMsg); } if (response.status === 204) { return { message: "Op√©ration r√©ussie." }; } return data; } catch (jsonError) { const text = await clone.text(); console.error("R√©ponse non-JSON:", text); if (!response.ok) { const titleMatch = text.match(/<title>(.*?)<\/title>/i); const errorTitle = titleMatch ? titleMatch[1] : `Erreur ${response.status}`; throw new Error(`Erreur Serveur: ${errorTitle}`); } else { throw new Error('R√©ponse serveur invalide.'); } } }
    function handleApiError(error) { console.error("Erreur API:", error); let displayMessage = "Une erreur est survenue."; if (error && error.message) { if(error.message.toLowerCase().includes('failed to fetch')) { displayMessage = "Erreur r√©seau."; } else if (error.message.startsWith('Erreur Serveur:') || error.message.startsWith('Validation:') || error.message.startsWith('Erreur ')) { displayMessage = error.message; } else if (error.message.length < 150) { displayMessage = error.message; } else { displayMessage = "Erreur technique."; } } showAlert(displayMessage, 'error'); }
    // --- Fonction Print MISE A JOUR ---
    function printElement(elementToPrint, title = "Impression") { if (!elementToPrint) { console.error("Element √† imprimer non trouv√©"); showAlert("Erreur: Contenu √† imprimer non trouv√©.", "error"); return; } try { const contentToPrint = elementToPrint.cloneNode(true); contentToPrint.querySelectorAll('.no-print, button, select, input:not([type=checkbox]):not([type=radio]), .crud-buttons, #print-timetable-btn, #reset-timetable-btn').forEach(el => el.remove()); const printContents = contentToPrint.outerHTML; const logoPath = '/images/logo_edumali.png'; fetch(logoPath).then(res => { if (!res.ok) { console.warn('Logo non trouv√©, impression sans logo.'); return null; } return res.blob(); }).then(blob => { const reader = new FileReader(); reader.onloadend = () => { const logoBase64 = reader.result; const primaryColor = '#faf0d6'; const secondaryColor = '#ffc107'; const accentColor = '#198754'; const textDark = '#2e2e2e'; const bgColor = '#ffffff'; const legendHtml = `<div class="legend-print" style="margin-top: 20px; font-size: 8pt; border-top: 1px solid #ccc; padding-top: 10px; page-break-before: avoid;"><strong style="color: ${textDark};">L√©gende :</strong> <span style="background-color:#e0f2fe !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Disponible</span> <span style="background-color:#fef9c3 !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Pr√©paration</span> <span style="background-color:#dcfce7 !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Enregistrement</span> <span style="background-color:#fecaca !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Non Disponible</span></div>`; const finalLegend = title && title.toLowerCase().includes('emploi du temps') ? legendHtml : ''; const popupWin = window.open('', '_blank', 'top=0,left=0,height=100%,width=auto'); if (!popupWin) { showAlert("V√©rifiez bloqueurs popup.", "error"); return; } popupWin.document.open(); popupWin.document.write(`<!DOCTYPE html><html lang="fr"><head><meta charset="UTF-8"><title>${title}</title><style>@media print{body{-webkit-print-color-adjust:exact !important;print-color-adjust:exact !important;background-color:${bgColor} !important;}.print-header{border-bottom-color:${secondaryColor} !important;}th{background-color:${primaryColor} !important;color:${textDark} !important;}td.available{background-color:#e0f2fe !important;}td.prep{background-color:#fef9c3 !important;}td.record{background-color:#dcfce7 !important;}td.unavailable{background-color:#fecaca !important;}.no-print{display:none !important;}table,tr,td,th,tbody,thead,tfoot,li,span,p,strong,h1,h2,h3,h4,h5,div:not(.print-header):not(.legend-print){display:revert !important;visibility:visible !important;}td span{display:inline !important;}}body{font-family:'Inter',sans-serif;padding:20px;font-size:10pt;line-height:1.4;color:${textDark};background-color:${bgColor};}.print-header{display:flex;justify-content:space-between;align-items:center;border-bottom:2px solid ${secondaryColor};padding-bottom:10px;margin-bottom:20px;}.print-header img{max-height:50px;max-width:150px;}.print-header h2{margin:0;color:${accentColor};font-size:1.5em;font-weight:bold;}table{width:100%;border-collapse:collapse;margin-bottom:1rem;page-break-inside:auto;}tr{page-break-inside:avoid;page-break-after:auto;}th,td{border:1px solid #ccc !important;padding:6px 8px;text-align:left;vertical-align:top;font-size:9pt;word-wrap:break-word;}th{background-color:${primaryColor};font-weight:bold;}h3,h4,h5{margin-top:1rem;margin-bottom:.5rem;color:${accentColor};font-weight:bold;}ul{padding-left:20px;margin-top:.2rem;margin-bottom:.2rem;}li{margin-bottom:.1rem;}button,select,input:not([type=checkbox]):not([type=radio]),.status-legend,.crud-buttons,.no-print,.alert-message,nav,aside,form{display:none !important;}.timetable th{text-align:center;}.timetable td{text-align:center;font-size:8pt;height:auto;min-height:30px;}</style></head><body onload="window.print(); setTimeout(window.close, 150);"><div class="print-header">${logoBase64 ? `<img src="${logoBase64}" alt="Logo">` : '<span></span>'}<h2>${title}</h2><span>${new Date().toLocaleDateString('fr-FR',{day:'2-digit',month:'2-digit',year:'numeric'})}</span></div>${printContents}${finalLegend}</body></html>`); popupWin.document.close(); }; reader.onerror = (e) => { console.error("Err logo base64:", e); printElementNoLogo(elementToPrint, title); }; if(blob) { reader.readAsDataURL(blob); } else { reader.onloadend(); } }).catch(err => { console.error("Err fetch logo:", err); printElementNoLogo(elementToPrint, title); }); } catch (e) { console.error("Erreur impression:", e); showAlert("Impossible g√©n√©rer aper√ßu.", "error"); } }
    function printElementNoLogo(elementToPrint, title = "Impression") { if (!elementToPrint) return; const printContents = elementToPrint.outerHTML; const primaryColor = '#faf0d6'; const secondaryColor = '#ffc107'; const accentColor = '#198754'; const textDark = '#2e2e2e'; const bgColor = '#ffffff'; const legendHtml = `<div class="legend-print" style="margin-top: 20px; font-size: 8pt; border-top: 1px solid #ccc; padding-top: 10px;"><strong>L√©gende :</strong> <span style="background-color:#e0f2fe !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Disponible</span> <span style="background-color:#fef9c3 !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Pr√©paration</span> <span style="background-color:#dcfce7 !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Enregistrement</span> <span style="background-color:#fecaca !important; border:1px solid #ccc; padding: 2px 5px; margin: 0 5px; display:inline-block;">Non Disponible</span></div>`; const finalLegend = title && title.toLowerCase().includes('emploi du temps') ? legendHtml : ''; const popupWinNoLogo = window.open('', '_blank'); if(!popupWinNoLogo){ showAlert("V√©rifiez bloqueurs popup.", "error"); return;} popupWinNoLogo.document.open(); popupWinNoLogo.document.write(`<!DOCTYPE html><html lang="fr"><head><meta charset="UTF-8"><title>${title}</title><style>/* Copiez les styles d'impression ici aussi */ @media print{body{-webkit-print-color-adjust:exact !important;print-color-adjust:exact !important;background-color:${bgColor} !important;} .print-header{border-bottom-color:${secondaryColor} !important;} th{background-color:${primaryColor} !important;} td.available{background-color:#e0f2fe !important;}td.prep{background-color:#fef9c3 !important;}td.record{background-color:#dcfce7 !important;}td.unavailable{background-color:#fecaca !important;}.no-print{display:none !important;}} body{font-family:'Inter',sans-serif;padding:20px;font-size:10pt;line-height:1.4;color:${textDark};background-color:${bgColor};}.print-header{display:flex;justify-content:space-between;align-items:center;border-bottom:2px solid ${secondaryColor};padding-bottom:10px;margin-bottom:20px;}.print-header h2{margin:0;color:${accentColor};font-size:1.5em;font-weight:bold;}table{width:100%;border-collapse:collapse;margin-bottom:1rem;}th,td{border:1px solid #ccc !important;padding:6px 8px;text-align:left;vertical-align:top;font-size:9pt;}th{background-color:${primaryColor};font-weight:bold;}h3,h4,h5{margin-top:1rem;margin-bottom:.5rem;color:${accentColor};}.timetable th,.timetable td{text-align:center;}.no-print{display:none !important;}</style></head><body onload="window.print(); setTimeout(window.close, 150);"><div class="print-header"><span></span><h2>${title}</h2><span>${new Date().toLocaleDateString('fr-FR')}</span></div>${printContents}${finalLegend}</body></html>`); popupWinNoLogo.document.close(); }

    // ==========================================================
    // === NAVIGATION ===
    // ==========================================================
    function setActiveSection(sectionId) { if (!sectionId) sectionId = 'accueil'; let sectionFound = false; if(navLinks) navLinks.forEach(link => { const linkSection = link.getAttribute('data-section'); link.classList.toggle('active', linkSection === sectionId); }); if(contentSections) contentSections.forEach(section => { const isActive = section.id === sectionId; section.classList.toggle('active', isActive); if(isActive) sectionFound = true; }); if (!sectionFound && sectionId !== 'accueil') { console.warn(`Section "${sectionId}" non trouv√©e, affichage accueil.`); setActiveSection('accueil'); if (window.location.hash !== '#accueil') window.location.hash = '#accueil'; return; } clearGlobalAlert(); if (sectionId === 'accueil') { renderDashboard(); } if (sectionId === 'classes' && classesStructureContainer && (!currentStructureCache || !classesStructureContainer.querySelector('.crud-buttons'))) { renderClassStructure(); } if (sectionId === 'enseignants' && teacherMatiereSelect && allMatieresCache.length === 0) { loadMatieresForTeacherForm(); } if (sectionId === 'horaires' && selectTeacherSchedule && selectTeacherSchedule.value === "" ) { if(teacherTimetableContainer) teacherTimetableContainer.innerHTML = '<p class="text-gray-500 italic text-center p-4">S√©lectionnez.</p>'; const printBtn = document.getElementById('print-timetable-btn'); const resetBtn = document.getElementById('reset-timetable-btn'); if(printBtn) printBtn.style.display='none'; if(resetBtn) resetBtn.style.display='none'; } }
    if(navLinks) navLinks.forEach(link => { link.addEventListener('click', (event) => { event.preventDefault(); const sectionId = link.getAttribute('data-section'); if(sectionId){ setActiveSection(sectionId); window.location.hash = sectionId; } }); });

    // ==========================================================
    // === GESTION DES ENSEIGNANTS ===
    // ==========================================================
    function renderTeacherList() { if (!teacherList || !selectTeacherSchedule || !planTeacherSelect) return; teacherList.innerHTML = '<tr><td colspan="4" class="p-4 italic text-center">Chargement...</td></tr>'; selectTeacherSchedule.innerHTML = '<option value="">...</option>'; planTeacherSelect.innerHTML = '<option value="">...</option>'; fetch('/api/enseignants').then(handleApiResponse).then(data => { localTeacherCache = data; teacherList.innerHTML = ''; selectTeacherSchedule.innerHTML = '<option value="">-- S√©lectionner --</option>'; planTeacherSelect.innerHTML = '<option value="">-- S√©lectionner --</option>'; if (!data || data.length === 0) { teacherList.innerHTML = '<tr><td colspan="4" class="p-4 text-center text-gray-500">Aucun enseignant.</td></tr>'; } else { data.forEach(teacher => { const row = document.createElement('tr'); let commentairesHtml = teacher.commentaires ? escapeJsString(teacher.commentaires.substring(0, 80)) + (teacher.commentaires.length > 80 ? '...' : '') : '<span class="text-xs italic text-gray-400">Aucun</span>'; row.innerHTML = `<td class="p-2 align-top">${teacher.nom || 'N/A'}</td><td class="p-2 align-top">${teacher.telephone || 'N/A'}</td><td class="text-xs p-2 align-top whitespace-normal break-words">${commentairesHtml}</td><td class="p-2 align-top whitespace-nowrap"><div class="flex flex-col space-y-1 md:flex-row md:space-y-0 md:space-x-1"><button class="text-xs p-1 bg-yellow-500 hover:bg-yellow-600 rounded text-white w-full md:w-auto" onclick="app.editTeacher(${teacher.id})">‚úèÔ∏è Modifier</button><button class="text-xs p-1 bg-red-600 hover:bg-red-700 rounded text-white w-full md:w-auto" onclick="app.deleteTeacher(${teacher.id})">üóëÔ∏è Suppr.</button></div></td>`; if(teacherList) teacherList.appendChild(row); if(selectTeacherSchedule) selectTeacherSchedule.add(new Option(teacher.nom || 'N/A', teacher.id)); if(planTeacherSelect) planTeacherSelect.add(new Option(teacher.nom || 'N/A', teacher.id)); }); } }).catch(error => { handleApiError(error); if(teacherList) teacherList.innerHTML = '<tr><td colspan="4" class="p-4 text-center text-red-500">Erreur.</td></tr>'; if(selectTeacherSchedule) selectTeacherSchedule.innerHTML = '<option value="">Erreur</option>'; if(planTeacherSelect) planTeacherSelect.innerHTML = '<option value="">Erreur</option>'; }); }
    function resetTeacherForm() { if (!teacherForm) return; teacherForm.reset(); if(teacherIdInput) teacherIdInput.value = ''; if(teacherMatiereSelect) teacherMatiereSelect.value = ''; if(teacherFormTitle) teacherFormTitle.textContent = 'Ajouter Enseignant'; if(saveTeacherBtn) { saveTeacherBtn.textContent = 'Enregistrer'; saveTeacherBtn.disabled = false; } if(cancelTeacherBtn) cancelTeacherBtn.style.display = 'none'; }
    function loadMatieresForTeacherForm() { if (!teacherMatiereSelect) return; teacherMatiereSelect.innerHTML = '<option value="">Chargement...</option>'; if (allMatieresCache.length > 0) { populateMatiereSelect(allMatieresCache); return; } fetch('/api/matieres').then(handleApiResponse).then(data => { allMatieresCache = data; populateMatiereSelect(data); }).catch(error => { handleApiError(error); if(teacherMatiereSelect) teacherMatiereSelect.innerHTML = '<option value="">Erreur</option>'; }); }
    function populateMatiereSelect(matieres) { if (!teacherMatiereSelect) return; teacherMatiereSelect.innerHTML = '<option value="">-- Choisir mati√®re principale --</option>'; if (!matieres || matieres.length === 0) { teacherMatiereSelect.innerHTML = '<option value="">Aucune mati√®re cr√©√©e</option>'; return; } matieres.sort((a, b) => a.nom.localeCompare(b.nom)).forEach(matiere => { const optionText = `${escapeJsString(matiere.nom)} (${matiere.classe?.nom || '?'})`; teacherMatiereSelect.add(new Option(optionText, matiere.id)); }); }
    function editTeacher(id) { if (!teacherForm || !saveTeacherBtn || !teacherIdInput || !teacherFormTitle || !teacherMatiereSelect) return; clearGlobalAlert(); resetTeacherForm(); teacherFormTitle.textContent = 'Chargement...'; saveTeacherBtn.disabled = true; if (allMatieresCache.length === 0) { loadMatieresForTeacherForm(); } fetch(`/api/enseignants/${id}`).then(handleApiResponse).then(teacher => { if (!teacher) throw new Error("Ens. non trouv√©."); teacherIdInput.value = teacher.id; document.getElementById('nom').value = teacher.nom || ''; document.getElementById('telephone').value = teacher.telephone || ''; document.getElementById('commentaires').value = teacher.commentaires || ''; setTimeout(() => { teacherMatiereSelect.value = teacher.matiere_principale_id || ''; }, 50); teacherFormTitle.textContent = 'Modifier Enseignant'; saveTeacherBtn.textContent = 'Mettre √† jour'; if(cancelTeacherBtn) cancelTeacherBtn.style.display = 'inline-block'; teacherForm.scrollIntoView({ behavior: 'smooth', block: 'start' }); }).catch(error => { handleApiError(error); resetTeacherForm(); }).finally(() => { if(saveTeacherBtn) saveTeacherBtn.disabled = false; }); }
    function teacherFormSubmitHandler(event) { if(!teacherForm || !saveTeacherBtn || !teacherMatiereSelect) return; event.preventDefault(); clearGlobalAlert(); const formData = new FormData(teacherForm); const teacherId = teacherIdInput.value; const isUpdating = !!teacherId; const matierePrincipaleId = formData.get('matiere_principale_id'); if (!matierePrincipaleId) { showAlert("Veuillez choisir une mati√®re principale.", "error"); return; } const teacherData = { nom: formData.get('nom'), telephone: formData.get('telephone') || null, commentaires: formData.get('commentaires') || null, matiere_principale_id: parseInt(matierePrincipaleId) }; let apiUrl = '/api/enseignants'; let apiMethod = 'POST'; if (isUpdating) { apiMethod = 'PUT'; apiUrl += `/${teacherId}`; } saveTeacherBtn.disabled = true; saveTeacherBtn.textContent = isUpdating ? 'M√†j...' : 'Enreg...'; fetch(apiUrl, { method: apiMethod, headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(teacherData) }).then(handleApiResponse).then(data => { showAlert(isUpdating ? 'Ens. mis √† jour.' : 'Ens. cr√©√©.', 'success'); resetTeacherForm(); renderTeacherList(); }).catch(error => { handleApiError(error); }).finally(() => { saveTeacherBtn.disabled = false; if (!isUpdating) resetTeacherForm(); else saveTeacherBtn.textContent = 'Mettre √† jour'; }); }
    if (teacherForm) { teacherForm.addEventListener('submit', teacherFormSubmitHandler); }
    if (cancelTeacherBtn) cancelTeacherBtn.addEventListener('click', resetTeacherForm);
    function deleteTeacher(id) { if (!id) return; clearGlobalAlert(); if (confirm(`Supprimer enseignant ID ${id} ?`)) { fetch(`/api/enseignants/${id}`, { method: 'DELETE', headers: {'Accept': 'application/json'} }).then(handleApiResponse).then(data => { showAlert(data.message || 'Ens. supprim√©.', 'success'); renderTeacherList(); if (selectTeacherSchedule && selectTeacherSchedule.value === String(id)) { selectTeacherSchedule.value = ""; if(teacherTimetableContainer) teacherTimetableContainer.innerHTML=''; } if (planTeacherSelect && planTeacherSelect.value === String(id)) { planTeacherSelect.value = ""; } }).catch(handleApiError); } }

    // ==========================================================
    // === EMPLOI DU TEMPS ENSEIGNANT (CONNECT√â) ===
    // ==========================================================
    const days = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven']; const hours = Array.from({ length: 11 }, (_, i) => 8 + i);
    function renderTimetable(teacherId) { if (!teacherTimetableContainer || !teacherId) return; teacherTimetableContainer.innerHTML = '<p class="p-4 italic text-center">Chargement...</p>'; const printBtnElement = document.getElementById('print-timetable-btn'); const resetBtnElement = document.getElementById('reset-timetable-btn'); if (printBtnElement) printBtnElement.style.display = 'none'; if (resetBtnElement) resetBtnElement.style.display = 'none'; currentTeacherSchedule = {}; fetch(`/api/enseignants/${teacherId}/schedule`).then(handleApiResponse).then(scheduleData => { currentTeacherSchedule = scheduleData || {}; let html = '<table class="timetable w-full border-collapse"><thead><tr><th class="border p-1 text-xs font-semibold">Heure</th>'; days.forEach(day => html += `<th class="border p-1 text-xs font-semibold">${day}</th>`); html += '</tr></thead><tbody>'; hours.forEach(hour => { html += `<tr><td class="time-label border p-1 text-xs font-medium">${hour}:00-${hour+1}:00</td>`; days.forEach(day => { const slotId = `${day}-${String(hour).padStart(2,'0')}`; const slotStatus = currentTeacherSchedule[slotId]||'available'; html += `<td class="border p-0 ${slotStatus}" data-slot-id="${slotId}" onclick="app.toggleSlotStatus(this, ${teacherId})"></td>`; }); html+='</tr>';}); html += '</tbody></table>'; teacherTimetableContainer.innerHTML = html; if (printBtnElement) { printBtnElement.style.display = 'inline-block'; printBtnElement.onclick = () => { const teacherName = localTeacherCache.find(t => t.id == teacherId)?.nom || `Ens. ID ${teacherId}`; printElement(teacherTimetableContainer.querySelector('table'), `Emploi du Temps - ${teacherName}`); }; } if (resetBtnElement) { resetBtnElement.style.display = 'inline-block'; resetBtnElement.onclick = () => resetTimetable(teacherId); } }).catch(error => { handleApiError(error); teacherTimetableContainer.innerHTML = '<p class="p-4 text-red-500 italic text-center">Erreur chargement EDT.</p>'; if (printBtnElement) printBtnElement.style.display = 'none'; if (resetBtnElement) resetBtnElement.style.display = 'none'; }); }
    function toggleSlotStatus(cell, teacherId) { const slotId = cell.getAttribute('data-slot-id'); if (!slotId || !teacherId) return; const statusClasses = ['available', 'prep', 'record', 'unavailable']; let currentStatus = statusClasses.find(s => cell.classList.contains(s)) || 'available'; const nextStatusIndex = (statusClasses.indexOf(currentStatus) + 1) % statusClasses.length; const nextStatus = statusClasses[nextStatusIndex]; cell.classList.remove(...statusClasses); cell.classList.add(nextStatus); if (nextStatus === 'available') delete currentTeacherSchedule[slotId]; else currentTeacherSchedule[slotId] = nextStatus; clearTimeout(saveTimeout); let saveIndicator = document.getElementById('edt-save-indicator'); if(saveIndicator) saveIndicator.textContent = ' (Modifi√©...)'; saveTimeout = setTimeout(() => { saveTimetable(teacherId); }, 1500); }
    function saveTimetable(teacherId) { if (!teacherId) return; console.log(`Sauvegarde EDT pour ${teacherId}...`); let saveIndicator = document.getElementById('edt-save-indicator'); let titleElement = document.querySelector('#horaires h2'); if(!saveIndicator && titleElement) { try { saveIndicator = document.createElement('span'); saveIndicator.id = 'edt-save-indicator'; saveIndicator.className = 'text-sm text-gray-500 ml-2 font-normal'; titleElement.appendChild(saveIndicator); } catch(e){} } if(saveIndicator) saveIndicator.textContent = ' (Sauvegarde...)'; fetch(`/api/enseignants/${teacherId}/schedule`, { method: 'PUT', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(currentTeacherSchedule) }).then(handleApiResponse).then(data => { console.log("Sauvegarde EDT r√©ussie:", data.message); if(saveIndicator) saveIndicator.textContent = ' (Enregistr√©)'; setTimeout(()=> { if(saveIndicator) saveIndicator.textContent = ''; }, 2000); }).catch(error => { handleApiError(error); showAlert("Erreur sauvegarde EDT !", 'error'); if(saveIndicator) saveIndicator.textContent = ' (Erreur!)'; }); }
    function resetTimetable(teacherId) { if (!teacherId) { console.error("ID manquant"); return; } clearGlobalAlert(); if (confirm("Voulez-vous vraiment effacer l'emploi du temps ?")) { currentTeacherSchedule = {}; saveTimetable(teacherId); renderTimetable(teacherId); showAlert("EDT r√©initialis√©.", "info"); } }
    function handleTeacherScheduleChange(event) { const id = parseInt(event.target.value); const container = document.getElementById('teacher-timetable-container'); const printBtn = document.getElementById('print-timetable-btn'); const resetBtn = document.getElementById('reset-timetable-btn'); if(id){ renderTimetable(id); } else { if(container) container.innerHTML = '<p class="italic text-center p-4">S√©lectionnez.</p>'; currentTeacherSchedule = {}; if(printBtn) printBtn.style.display='none'; if(resetBtn) resetBtn.style.display='none'; } }
    if (selectTeacherSchedule) { selectTeacherSchedule.addEventListener('change', handleTeacherScheduleChange); }

    // ==========================================================
    // === GESTION STRUCTURE P√âDAGOGIQUE ===
    // ==========================================================
    function renderClassStructure() { if (!classesStructureContainer) return; classesStructureContainer.innerHTML = '<p class="p-4 italic">Chargement...</p>'; fetch('/api/structure').then(handleApiResponse).then(data => { currentStructureCache = data; classesStructureContainer.innerHTML = ''; classesStructureContainer.innerHTML += `<div class="mb-4"><button onclick="app.promptAddClass()" class="bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded text-sm">‚ûï Ajouter Classe</button></div>`; if (!data || data.length === 0) { classesStructureContainer.innerHTML += '<p class="italic">Aucune classe.</p>'; return; } let html = '<div class="space-y-4">'; data.sort((a,b)=>a.nom.localeCompare(b.nom)).forEach(classe => { html += `<div class="p-4 border rounded-lg bg-gray-50 relative group"><div class="absolute top-2 right-2 opacity-100 sm:opacity-0 sm:group-hover:opacity-100 flex space-x-1 z-10 crud-buttons"><button onclick="app.promptAddMatiere('${classe.id}')" class="p-1 bg-blue-500" title="Ajouter Mati√®re">‚ûïM</button><button onclick="app.promptEditClass('${classe.id}', '${escapeJsString(classe.nom)}')" class="p-1 bg-yellow-500" title="Modifier Classe">‚úèÔ∏è</button><button onclick="app.confirmDeleteClass('${classe.id}', '${escapeJsString(classe.nom)}')" class="p-1 bg-red-600" title="Supprimer Classe">üóëÔ∏è</button></div><h3 class="text-xl font-semibold mb-2">${classe.nom} <span class="text-sm text-gray-500">(${classe.id})</span></h3>`; if (classe.matieres && classe.matieres.length > 0) { html += '<ul class="ml-4 space-y-3">'; classe.matieres.sort((a,b)=>a.nom.localeCompare(b.nom)).forEach(matiere => { const respName = matiere.enseignants_responsables && matiere.enseignants_responsables.length > 0 ? matiere.enseignants_responsables[0].nom : '<i class="text-red-500 text-xs">Non assign√©</i>'; html += `<li class="relative group/matiere border-l-2 pl-3 border-indigo-200 py-1"><div class="absolute top-1 right-0 opacity-100 sm:opacity-0 sm:group-hover/matiere:opacity-100 flex space-x-1 z-10 crud-buttons"><button onclick="app.promptAddChapitre(${matiere.id})" class="p-1 bg-blue-400" title="Ajouter Chapitre">‚ûïC</button><button onclick="app.promptEditMatiere(${matiere.id}, '${escapeJsString(matiere.nom)}', '${matiere.enseignant_responsable_id || ''}')" class="p-1 bg-yellow-400 text-gray-800" title="Modifier Mati√®re/Resp.">‚úèÔ∏è</button><button onclick="app.confirmDeleteMatiere(${matiere.id}, '${escapeJsString(matiere.nom)}')" class="p-1 bg-red-500" title="Supprimer Mati√®re">üóëÔ∏è</button></div><strong class="text-indigo-700">${matiere.nom}</strong> <span class="text-xs text-gray-600">[Resp: ${respName}]</span>`; if (matiere.chapitres && matiere.chapitres.length > 0) { html += '<ul class="ml-6 list-disc space-y-2 mt-1">'; matiere.chapitres.sort((a,b)=>(a.ordre ?? 0) - (b.ordre ?? 0) || a.nom.localeCompare(b.nom)).forEach(chapitre => { html += `<li class="relative group/chapitre"><div class="absolute top-0 right-0 opacity-100 sm:opacity-0 sm:group-hover/chapitre:opacity-100 flex space-x-1 z-10 crud-buttons"><button onclick="app.promptAddLecon(${chapitre.id})" class="p-1 bg-blue-300 text-gray-800" title="Ajouter Le√ßon">‚ûïL</button><button onclick="app.promptEditChapitre(${chapitre.id}, '${escapeJsString(chapitre.nom)}')" class="p-1 bg-yellow-300 text-gray-800" title="Modifier Chapitre">‚úèÔ∏è</button><button onclick="app.confirmDeleteChapitre(${chapitre.id}, '${escapeJsString(chapitre.nom)}')" class="p-1 bg-red-400" title="Supprimer Chapitre">üóëÔ∏è</button></div><span>${chapitre.nom}</span>`; if (chapitre.lecons && chapitre.lecons.length > 0) { html += '<ul class="ml-8 list-decimal text-sm space-y-1 mt-1">'; chapitre.lecons.sort((a,b)=> (a.num || '').localeCompare(b.num || '', undefined, {numeric: true, sensitivity: 'base'})).forEach(lecon => { const teacherName = matiere.enseignants_responsables && matiere.enseignants_responsables.length > 0 ? matiere.enseignants_responsables[0].nom : 'N/A'; html += `<li class="relative group/lecon"><div class="absolute top-0 right-0 opacity-100 sm:opacity-0 sm:group-hover/lecon:opacity-100 flex space-x-1 z-10 crud-buttons"><button onclick="app.promptEditLecon(${lecon.id}, '${escapeJsString(lecon.titre)}')" class="p-1 bg-yellow-200 text-gray-800" title="Modifier (via FdR)">‚úèÔ∏è</button><button onclick="app.confirmDeleteLecon(${lecon.id}, '${escapeJsString(lecon.titre)}')" class="p-1 bg-red-300" title="Supprimer Le√ßon">üóëÔ∏è</button></div><span><strong>${lecon.num || '?'}</strong>: ${lecon.titre || 'N/A'} <span class="text-gray-500 text-xs">(${teacherName})</span></span></li>`; }); html += '</ul>'; } else { html += '<p class="text-xs italic ml-8">Aucune le√ßon.</p>'; } html += '</li>'; }); html += '</ul>'; } else { html += '<p class="text-sm italic ml-6">Aucun chapitre.</p>'; } html += '</li>'; }); html += '</ul>'; } else { html += '<p class="text-sm italic ml-4">Aucune mati√®re.</p>'; } html += `</div>`; }); html += '</div>'; classesStructureContainer.innerHTML += html; document.querySelectorAll('.crud-buttons button').forEach(btn => { btn.classList.add('text-white', 'rounded', 'px-1.5', 'py-0.5', 'text-xs', 'shadow-sm'); }); }).catch(error => { handleApiError(error); classesStructureContainer.innerHTML = `<p class="p-4 text-red-500">Erreur chargement structure.</p>`; }); }
    function promptAddClass() { clearGlobalAlert(); const id=prompt("ID Classe:"); if(!id) return; const nom=prompt("Nom Classe:"); if(!nom) return; addClass(id.trim(), nom.trim()); }
    function addClass(id, nom) { fetch('/api/classes', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ id: id, nom: nom }) }).then(handleApiResponse).then(() => { showAlert('Classe ajout√©e.', 'success'); renderClassStructure(); populateClasseSelect(); loadMatieresForTeacherForm(); }).catch(handleApiError); }
    function promptEditClass(id, currentNom) { clearGlobalAlert(); const nom=prompt(`Nouveau nom pour "${currentNom}":`, currentNom); if(nom && nom.trim() !== currentNom) editClass(id, nom.trim()); }
    function editClass(id, nom) { fetch(`/api/classes/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ nom: nom }) }).then(handleApiResponse).then(() => { showAlert('Classe m√†j.', 'success'); renderClassStructure(); populateClasseSelect(); loadMatieresForTeacherForm(); }).catch(handleApiError); }
    function confirmDeleteClass(id, nom) { clearGlobalAlert(); if(confirm(`Supprimer classe "${nom}" et tout son contenu?`)) deleteClass(id); }
    function deleteClass(id) { fetch(`/api/classes/${id}`, { method: 'DELETE', headers: {'Accept': 'application/json'} }).then(handleApiResponse).then(() => { showAlert('Classe supprim√©e.', 'success'); renderClassStructure(); populateClasseSelect(); loadMatieresForTeacherForm(); }).catch(handleApiError); }
    function promptAddMatiere(classeId) { clearGlobalAlert(); const nom = prompt(`Nom nouvelle mati√®re pour classe ${classeId}:`); if (!nom || !nom.trim()) return; const respId = prompt(`ID Enseignant Responsable (laisser vide si aucun):`); addMatiere(classeId, nom.trim(), respId ? parseInt(respId) : null); }
    function addMatiere(classeId, nom, enseignant_responsable_id = null) { fetch('/api/matieres', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ classe_id: classeId, nom: nom, enseignant_responsable_id: enseignant_responsable_id }) }).then(handleApiResponse).then(() => { showAlert('Mati√®re ajout√©e.', 'success'); renderClassStructure(); loadMatieresForTeacherForm(); }).catch(handleApiError); }
    function promptEditMatiere(matiereId, currentNom, currentRespIdStr) { clearGlobalAlert(); const nom = prompt(`Nouveau nom pour "${currentNom}":`, currentNom); const respIdRaw = prompt(`ID Enseignant Responsable (actuel: ${currentRespIdStr || 'aucun'}). Laisser vide pour retirer:`, currentRespIdStr || ''); if (nom !== null && respIdRaw !== null) { const newName = nom.trim(); const respId = respIdRaw && respIdRaw.trim() !== '' ? parseInt(respIdRaw) : null; const currentRespId = currentRespIdStr ? parseInt(currentRespIdStr) : null; if (newName && (newName !== currentNom || respId !== currentRespId )) { editMatiere(matiereId, newName, respId); } else if (!newName) { showAlert("Nom requis.", "error"); } else { showAlert("Aucune modif.", "info"); } } else { showAlert("Modif annul√©e.", "info");} }
    function editMatiere(id, nom, enseignant_responsable_id = null) { fetch(`/api/matieres/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ nom: nom, enseignant_responsable_id: enseignant_responsable_id }) }).then(handleApiResponse).then(() => { showAlert('Mati√®re m√†j.', 'success'); renderClassStructure(); loadMatieresForTeacherForm(); }).catch(handleApiError); }
    function confirmDeleteMatiere(id, nom) { clearGlobalAlert(); if (confirm(`Supprimer mati√®re "${nom}" et ses enfants?`)) deleteMatiere(id); }
    function deleteMatiere(id) { fetch(`/api/matieres/${id}`, { method: 'DELETE', headers: {'Accept': 'application/json'} }).then(handleApiResponse).then(() => { showAlert('Mati√®re supprim√©e.', 'success'); renderClassStructure(); loadMatieresForTeacherForm(); }).catch(handleApiError); }
    function promptAddChapitre(matiereId) { clearGlobalAlert(); const nom = prompt(`Nom nouveau chapitre pour mati√®re ID ${matiereId}:`); if (nom && nom.trim()) addChapitre(matiereId, nom.trim()); }
    function addChapitre(matiereId, nom) { fetch('/api/chapitres', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ matiere_id: matiereId, nom: nom }) }).then(handleApiResponse).then(() => { showAlert('Chapitre ajout√©.', 'success'); renderClassStructure(); }).catch(handleApiError); }
    function promptEditChapitre(chapitreId, currentNom) { clearGlobalAlert(); const nom = prompt(`Nouveau nom pour "${currentNom}":`, currentNom); if (nom && nom.trim() !== currentNom) editChapitre(chapitreId, nom.trim()); }
    function editChapitre(id, nom) { fetch(`/api/chapitres/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ nom: nom }) }).then(handleApiResponse).then(() => { showAlert('Chapitre m√†j.', 'success'); renderClassStructure(); }).catch(handleApiError); }
    function confirmDeleteChapitre(id, nom) { clearGlobalAlert(); if (confirm(`Supprimer chapitre "${nom}" et ses le√ßons?`)) deleteChapitre(id); }
    function deleteChapitre(id) { fetch(`/api/chapitres/${id}`, { method: 'DELETE', headers: {'Accept': 'application/json'} }).then(handleApiResponse).then(() => { showAlert('Chapitre supprim√©.', 'success'); renderClassStructure(); }).catch(handleApiError); }
    function promptAddLecon(chapitreId) { clearGlobalAlert(); const num = prompt(`N¬∞ le√ßon pour chap. ID ${chapitreId}:`); if (!num) return; const titre = prompt(`Titre le√ßon (N¬∞ ${num}):`); if (titre && titre.trim()) addLecon(chapitreId, num.trim(), titre.trim()); }
    function addLecon(chapitreId, num, titre) { fetch('/api/lecons', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ chapitre_id: chapitreId, num: num, titre: titre }) }).then(handleApiResponse).then(() => { showAlert('Le√ßon ajout√©e.', 'success'); renderClassStructure(); }).catch(handleApiError); }
    function promptEditLecon(leconId, currentTitre) { showAlert("√âdition via Feuille de Route.", 'info'); }
    function editLecon(id, titre) { showAlert("Fonction non impl√©ment√©e ici.", "warning"); }
    function confirmDeleteLecon(id, titre) { clearGlobalAlert(); if (confirm(`Supprimer le√ßon "${titre}" (${id})?`)) deleteLecon(id); }
    function deleteLecon(id) { fetch(`/api/lecons/${id}`, { method: 'DELETE', headers: {'Accept': 'application/json'} }).then(handleApiResponse).then(() => { showAlert('Le√ßon supprim√©e.', 'success'); renderClassStructure(); }).catch(handleApiError); }

    // === PLANIFICATION STUDIO ===
    function renderStudioPlanning(dateString) {
        if (!studioPlanningView) { console.error("Elem planning view manquant"); return; }
    
        // Forcer/V√©rifier le format YYYY-MM-DD avant toute chose
        let formattedDate = '';
        try {
            // Tenter de cr√©er une date valide, en prenant seulement la partie date si format ISO
            const datePart = dateString.split('T')[0];
            const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
            if (!dateRegex.test(datePart)) {
                throw new Error("Format initial non conforme YYYY-MM-DD");
            }
            // Recr√©er une date pour normaliser (√©vite probl√®mes si date invalide comme 31 Fev)
            const dateObj = new Date(datePart + 'T00:00:00Z'); // Utiliser Z pour UTC et √©viter d√©calage
            if (isNaN(dateObj.getTime())) {
                 throw new Error("Date invalide apr√®s parsing");
            }
             // Re-formater en YYYY-MM-DD depuis l'objet Date (en UTC)
             const year = dateObj.getUTCFullYear();
             const month = String(dateObj.getUTCMonth() + 1).padStart(2, '0');
             const day = String(dateObj.getUTCDate()).padStart(2, '0');
             formattedDate = `<span class="math-inline">\{year\}\-</span>{month}-${day}`;
    
             if (!dateRegex.test(formattedDate)) { // Ultime v√©rification
                 throw new Error("Format final non conforme YYYY-MM-DD");
             }
    
        } catch (e) {
            console.error("Erreur formatage/validation date planning:", dateString, e);
            handleApiError(new Error("Format de date de planning invalide."));
            studioPlanningView.innerHTML = `<p class="p-4 text-red-500 italic text-sm">Erreur format date.</p>`;
            return;
        }
    
        // Si on arrive ici, formattedDate est en YYYY-MM-DD
        studioPlanningView.innerHTML = '<p class="p-4 italic text-sm">Chargement...</p>';
        console.log(`Appel API Planning pour date: ${formattedDate}`); // Log de v√©rification
    
        fetch(`/api/planning?date=${formattedDate}`)
            .then(handleApiResponse)
            .then(bookings => {
                // ... (Affichage du planning comme avant) ...
                studioPlanningView.innerHTML = ''; if (!bookings || bookings.length === 0) { studioPlanningView.innerHTML = `<p>Aucune r√©servation pour ${formattedDate}.</p>`; return; } const planningByStudio = {}; bookings.forEach(b => { if(!planningByStudio[b.studio_id]) planningByStudio[b.studio_id] = []; planningByStudio[b.studio_id].push(b); }); Object.keys(planningByStudio).sort().forEach(studioId => { let html = `<h4>Studio ${studioId}</h4>`; const studioBookings = planningByStudio[studioId]; if (studioBookings.length > 0) { html += '<ul>'; studioBookings.sort((a,b)=>a.heure_debut.localeCompare(b.heure_debut)).forEach(b => { const teacher = b.enseignant?.nom || '?'; const start = b.heure_debut.substring(0,5); const end = b.heure_fin.substring(0,5); html += `<li><span class="math-inline">\{start\}\-</span>{end}: <span class="math-inline">\{teacher\} \(</span>{escapeJsString(b.lecon_description||'N/A')}) <button onclick="app.cancelBookingApi(<span class="math-inline">\{b\.id\},'</span>{b.date_reservation}')">(X)</button></li>`; }); html += '</ul>'; } else { html += `<p>Aucune r√©servation.</p>`; } studioPlanningView.innerHTML += html; });
            })
            .catch(error => {
                 handleApiError(error); // G√®re affichage erreur 422/500 etc.
                 studioPlanningView.innerHTML = `<p class="p-4 text-red-500 text-sm">Erreur chargement planning.</p>`;
            });
    }
    function loadPlannableLessons(teacherId) { if (!planLessonSelect || !planLessonDetailsDiv) return; planLessonSelect.innerHTML = '<option value="">Chargement...</option>'; planLessonSelect.disabled = true; planLessonDetailsDiv.innerHTML = ''; if (!teacherId || teacherId === "") { planLessonSelect.innerHTML = '<option value="">-- S√©lectionnez enseignant --</option>'; planLessonSelect.disabled = true; return; } fetch(`/api/enseignants/${teacherId}/lecons-planifiables`).then(handleApiResponse).then(lecons => { console.log(`Le√ßons re√ßues pour ${teacherId}:`, lecons); if (!lecons || lecons.length === 0) { planLessonSelect.innerHTML = '<option value="">-- Aucune le√ßon √† planifier --</option>'; } else { planLessonSelect.innerHTML = '<option value="">-- S√©lectionnez une le√ßon --</option>'; lecons.forEach(lecon => { let cN = lecon.chapitre?.matiere?.classe?.nom||'?'; let mN = lecon.chapitre?.matiere?.nom||'?'; let chN = lecon.chapitre?.nom||'?'; let optTxt = `${cN}>${mN}>${chN}>${lecon.num||'?'} ${lecon.titre||''}`; planLessonSelect.add(new Option(optTxt, lecon.id)); }); } planLessonSelect.disabled = false; }).catch(error => { handleApiError(error); planLessonSelect.innerHTML = '<option value="">Erreur chargement</option>'; planLessonSelect.disabled = false; }); }
    if (planTeacherSelect) { planTeacherSelect.addEventListener('change', (event) => { loadPlannableLessons(event.target.value); }); }
    if(planLessonSelect) { planLessonSelect.addEventListener('change', (event) => { const lessonId = event.target.value; if(planLessonDetailsDiv) planLessonDetailsDiv.innerHTML = ''; if(planLessonDescInput) planLessonDescInput.value = ''; if (lessonId && planLessonSelect.selectedIndex > 0) { if(planLessonDescInput) { planLessonDescInput.value = planLessonSelect.options[planLessonSelect.selectedIndex].text; planLessonDescInput.readOnly = true; } } else { if(planLessonDescInput) { planLessonDescInput.placeholder="Description..."; planLessonDescInput.readOnly = false; } } }); }
    function planningFormSubmitHandler(event) { if(!planningForm || !planSubmitButton) return; event.preventDefault(); clearGlobalAlert(); const formData = new FormData(planningForm); const selectedLeconId = parseInt(formData.get('lecon_id')); let leconDescription = formData.get('lecon_description'); if (selectedLeconId && !leconDescription && planLessonSelect && planLessonSelect.selectedIndex > 0) { leconDescription = planLessonSelect.options[planLessonSelect.selectedIndex].text; } if (!selectedLeconId) { showAlert('S√©lectionnez le√ßon.', 'error'); return; } const bookingData = { enseignant_id: parseInt(formData.get('enseignant_id')), lecon_id: selectedLeconId, lecon_description: leconDescription || "Le√ßon ID " + selectedLeconId, date_reservation: formData.get('date_reservation'), heure_debut: formData.get('heure_debut'), heure_fin: formData.get('heure_fin'), studio_id: parseInt(formData.get('studio_id')) }; if (bookingData.heure_fin <= bookingData.heure_debut) { showAlert('Fin avant d√©but!', 'error'); return; } if (!bookingData.enseignant_id || !bookingData.date_reservation || !bookingData.heure_debut || !bookingData.heure_fin || !bookingData.studio_id || !bookingData.lecon_id ) { showAlert('Champs requis.', 'error'); return; } planSubmitButton.disabled = true; planSubmitButton.textContent = 'Planif...'; fetch('/api/planning', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(bookingData) }).then(handleApiResponse).then(data => { showAlert(data.message || 'Session planifi√©e!', 'success'); planningForm.reset(); if (planLessonSelect) { planLessonSelect.innerHTML = '<option value="">-- S√©lectionnez enseignant --</option>'; planLessonSelect.disabled = true; } if(planLessonDetailsDiv) planLessonDetailsDiv.innerHTML = ''; if(planLessonDescInput) { planLessonDescInput.value=''; planLessonDescInput.readOnly = false;} if (viewPlanningDateInput.value === bookingData.date_reservation) renderStudioPlanning(bookingData.date_reservation); }).catch(error => { handleApiError(error); }).finally(() => { planSubmitButton.disabled = false; planSubmitButton.textContent = 'V√©rifier & Planifier'; }); }
    if(planningForm) { planningForm.addEventListener('submit', planningFormSubmitHandler); }
    function cancelBookingApi(bookingId, dateOfBooking) { if (!bookingId) return; clearGlobalAlert(); if (confirm(`Annuler r√©servation ID ${bookingId} ?`)) { fetch(`/api/planning/${bookingId}`, { method: 'DELETE', headers: {'Accept': 'application/json'} }).then(handleApiResponse).then(data => { showAlert(data.message || 'R√©sa annul√©e.', 'success'); renderStudioPlanning(dateOfBooking); }).catch(handleApiError); } }
    if (viewPlanningDateInput) { viewPlanningDateInput.addEventListener('change', (event) => { renderStudioPlanning(event.target.value); }); }

    // === FEUILLE DE ROUTE ===
    function populateClasseSelect() { if(!selectClasseRoute) return; selectClasseRoute.innerHTML = '<option value="">Chargement...</option>'; fetch('/api/structure').then(handleApiResponse).then(data => { selectClasseRoute.innerHTML = '<option value="">-- S√©lectionner --</option>'; if (data && Array.isArray(data) && data.length > 0) { data.sort((a,b)=>a.nom.localeCompare(b.nom)).forEach(classe => { selectClasseRoute.add(new Option(classe.nom, classe.id)); }); } else { selectClasseRoute.innerHTML = '<option value="">Aucune classe</option>'; } }).catch(error => { handleApiError(error); selectClasseRoute.innerHTML = '<option value="">Erreur</option>'; }); }
    function generateFeuilleRouteHTML(classeId, isBlank = false, isInteractive = false) { if(!routeContent || !saveChangesBtn) return; routeContent.innerHTML = '<p class="p-4 text-center italic">Chargement...</p>'; saveChangesBtn.style.display = 'none'; fetch(`/api/structure?classe_id=${classeId}`).then(handleApiResponse).then(classe => { if (!classe || typeof classe !== 'object' ) { routeContent.innerHTML = `<p>Erreur: Classe ${classeId} non trouv√©e.</p>`; return; } let html = `<div class="p-4 print-container"><h3 class="text-xl font-semibold mb-4">Feuille de Route - ${classe.nom || ''}</h3>`; if (!isBlank && isInteractive) { html += `<div class="mb-4 status-legend text-xs no-print">L√©gende: üîú... ‚ùå</div>`; } if (!classe.matieres || classe.matieres.length === 0) { html += `<p class="p-4 italic text-center">Aucune mati√®re.</p>`; } else { classe.matieres.sort((a,b)=>a.nom.localeCompare(b.nom)).forEach(matiere => { html += `<h4 class="text-lg font-medium mt-4 mb-2 text-blue-700">${matiere.nom}</h4>`; if (matiere.chapitres && matiere.chapitres.length > 0) { matiere.chapitres.sort((a,b)=>(a.ordre??0) - (b.ordre??0) || a.nom.localeCompare(b.nom)).forEach(chapitre => { html += `<h5 class="text-md font-medium mt-3 mb-1 ml-4">${chapitre.nom}</h5>`; html += `<div class="overflow-x-auto border rounded-lg ml-4 mb-4"><table class="min-w-full text-sm"><thead><tr><th>N¬∞</th><th>Titre</th><th>Statut</th><th>Date</th><th>Dur√©e</th><th>Resp.</th><th>Comms</th></tr></thead><tbody>`; if (chapitre.lecons && chapitre.lecons.length > 0) { chapitre.lecons.sort((a,b)=> (a.num || '').localeCompare(b.num || '', undefined, {numeric: true, sensitivity: 'base'})).forEach(lecon => { const teacherName = matiere.enseignants_responsables && matiere.enseignants_responsables.length > 0 ? matiere.enseignants_responsables[0].nom : 'N/A'; html += `<tr data-lesson-id="${lecon.id}"><td>${lecon.num||''}</td><td>${escapeJsString(lecon.titre||'')}</td>`; if (isInteractive && !isBlank) { html += `<td><select class="feuille-route-select" name="statut_${lecon.id}">`; statusOptions.forEach(opt => { html += `<option value="${opt.value}" ${lecon.statut === opt.value ? 'selected' : ''}>${opt.text}</option>`; }); html += `</select></td>`; html += `<td><input type="date" class="feuille-route-input" name="date_${lecon.id}" value="${lecon.date_enregistrement || ''}"></td>`; html += `<td><input type="number" class="feuille-route-input w-16" name="duree_${lecon.id}" value="${lecon.duree_min || ''}" min="0"></td>`; html += `<td>${teacherName}</td>`; html += `<td><input type="text" class="feuille-route-input feuille-route-comment" name="commentaires_${lecon.id}" value="${escapeJsString(lecon.commentaires || '')}"></td>`; } else { const statusText = statusOptions.find(opt => opt.value === lecon.statut)?.text || ''; html += `<td>${isBlank?'':statusText}</td><td>${isBlank?'':(lecon.date_enregistrement||'‚Äî')}</td><td>${isBlank?'':(lecon.duree_min||'')}</td><td>${isBlank?'':teacherName}</td><td>${isBlank?'':escapeJsString(lecon.commentaires||'')}</td>`; } html += `</tr>`; }); } else { html += `<tr><td colspan="7" class="text-center py-2">Aucune le√ßon.</td></tr>`; } html += `</tbody></table></div>`; }); } else { html += `<p class="ml-4 italic text-sm">Aucun chapitre.</p>`; } }); } html += `</div>`; routeContent.innerHTML = html; if (isInteractive && !isBlank) saveChangesBtn.style.display = 'inline-block'; }).catch(error => { handleApiError(error); routeContent.innerHTML = `<p class="p-4 text-red-500 italic">Impossible charger feuille.</p>`; }); }
    if (generateRouteBtn) { generateRouteBtn.addEventListener('click', () => { const id = selectClasseRoute?.value; clearGlobalAlert(); if(id) generateFeuilleRouteHTML(id, false, true); else { if(routeContent) routeContent.innerHTML='<p class="p-4 text-center">S√©lectionnez classe.</p>'; if(saveChangesBtn) saveChangesBtn.style.display='none'; } }); }
    if (generateBlankBtn) { generateBlankBtn.addEventListener('click', () => { const id = selectClasseRoute?.value; clearGlobalAlert(); if(id) generateFeuilleRouteHTML(id, false, false); /* Change ici pour Aper√ßu */ else { if(routeContent) routeContent.innerHTML='<p class="p-4 text-center">S√©lectionnez classe.</p>'; if(saveChangesBtn) saveChangesBtn.style.display='none'; } }); }
    if (saveChangesBtn) { saveChangesBtn.addEventListener('click', () => { clearGlobalAlert(); const rows = routeContent?.querySelectorAll('tbody tr[data-lesson-id]'); if (!rows) return; const updatedLessonsData = []; rows.forEach(row => { const lessonId = row.getAttribute('data-lesson-id'); if (!lessonId || isNaN(parseInt(lessonId))) return; const statutInput = row.querySelector(`select[name="statut_${lessonId}"]`); const dateInput = row.querySelector(`input[name="date_${lessonId}"]`); const dureeInput = row.querySelector(`input[name="duree_${lessonId}"]`); const commentairesInput = row.querySelector(`input[name="commentaires_${lessonId}"]`); if (statutInput && dateInput && dureeInput && commentairesInput) { updatedLessonsData.push({ id: parseInt(lessonId), statut: statutInput.value, date_enregistrement: dateInput.value || null, duree_min: dureeInput.value !== '' ? parseInt(dureeInput.value) : null, commentaires: commentairesInput.value }); }}); if (updatedLessonsData.length === 0) { showAlert('Aucune modif.', 'info'); return; } console.log("Donn√©es FdR envoy√©es √† l'API:", JSON.stringify(updatedLessonsData, null, 2)); // Log pour debug date
    saveChangesBtn.disabled = true; saveChangesBtn.textContent = 'Sauvegarde...'; fetch('/api/lecons-bulk-update', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(updatedLessonsData) }).then(handleApiResponse).then(data => { showAlert(data.message || 'Modifs enregistr√©es.', 'success'); }).catch(handleApiError).finally(() => { saveChangesBtn.disabled = false; saveChangesBtn.textContent = 'Enregistrer Modifs'; }); }); }
    if (printFdrBtn) { printFdrBtn.addEventListener('click', () => { printElement(routeContent?.querySelector('.print-container') || routeContent, "Feuille de Route"); }); }

    // === TABLEAU DE BORD (ACCUEIL) ===
    function renderDashboard() { const dashboardContent = document.getElementById('dashboard-content'); const loadingIndicator = document.getElementById('dashboard-loading'); const statsContainer = document.getElementById('dashboard-stats-container'); const leconsContainer = document.getElementById('dashboard-lecons-container'); const planningContainer = document.getElementById('dashboard-planning-container'); if (!dashboardContent || !loadingIndicator || !statsContainer || !leconsContainer || !planningContainer) { console.error("DOM Dashboard manquant."); return; } loadingIndicator.style.display = 'block'; statsContainer.style.display = 'none'; leconsContainer.style.display = 'none'; planningContainer.style.display = 'none'; fetch('/api/dashboard').then(handleApiResponse).then(data => { loadingIndicator.style.display = 'none'; statsContainer.style.display = 'block'; leconsContainer.style.display = 'block'; planningContainer.style.display = 'block'; if (data.stats) { document.getElementById('db-stat-classes').textContent = data.stats.totalClasses ?? '0'; document.getElementById('db-stat-matieres').textContent = data.stats.totalMatieres ?? '0'; document.getElementById('db-stat-chapitres').textContent = data.stats.totalChapitres ?? '0'; document.getElementById('db-stat-lecons').textContent = data.stats.totalLecons ?? '0'; const leconStatusDiv = document.getElementById('db-lecon-status'); if (leconStatusDiv) { leconStatusDiv.innerHTML = ''; const statusCounts = data.stats.leconStatusCounts || {}; const orderedStatus = ['torecord', 'editing', 'review', 'redo', 'validated']; let hasStatus = false; orderedStatus.forEach(statusKey => { const count = statusCounts[statusKey] || 0; const statusInfo = statusOptions.find(opt => opt.value === statusKey); if (statusInfo) { if(count > 0) hasStatus = true; let bgColor = 'bg-gray-200'; let textColor = 'text-gray-800'; if (statusKey === 'torecord') { bgColor = 'bg-blue-100'; textColor = 'text-blue-800';} else if (statusKey === 'editing') { bgColor = 'bg-purple-100'; textColor = 'text-purple-800';} else if (statusKey === 'review') { bgColor = 'bg-yellow-100'; textColor = 'text-yellow-800';} else if (statusKey === 'redo') { bgColor = 'bg-red-100'; textColor = 'text-red-800';} else if (statusKey === 'validated') { bgColor = 'bg-green-100'; textColor = 'text-green-800';} leconStatusDiv.innerHTML += `<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${bgColor} ${textColor}">${statusInfo.text.split(' ')[0]} ${statusInfo.text.split(' ')[1]} : ${count}</span>`; } }); if (!hasStatus) { leconStatusDiv.innerHTML = '<p class="italic text-sm">Aucune le√ßon.</p>'; } } } else { /* G√©rer absence stats */ } const upcomingDiv = document.getElementById('db-upcoming-planning'); if (upcomingDiv) { upcomingDiv.innerHTML = ''; const bookings = data.upcomingBookings || []; if (bookings.length === 0) { upcomingDiv.innerHTML = '<p class="italic text-sm">Aucune r√©servation √† venir.</p>'; } else { let listHtml = '<ul class="space-y-1">'; bookings.forEach(b => { const date = new Date(b.date_reservation + 'T00:00:00').toLocaleDateString('fr-FR', { weekday: 'short', day: 'numeric', month: 'short' }); const start = b.heure_debut.substring(0,5); const end = b.heure_fin.substring(0,5); const teacher = b.enseignant?.nom || 'Inconnu'; listHtml += `<li class="border-b pb-1">${date} (${start}-${end}) - St.${b.studio_id}: ${teacher} (${escapeJsString(b.lecon_description||'N/A')})</li>`; }); listHtml += '</ul>'; upcomingDiv.innerHTML = listHtml; } } }).catch(error => { handleApiError(error); loadingIndicator.style.display = 'none'; if(dashboardContent) dashboardContent.innerHTML = `<p class="text-red-500 p-4">Erreur chargement TdB.</p>`; }); }

    // === INITIALISATION ===
    function initializeApp() { console.log("Initialisation application..."); const initialSectionHash = window.location.hash.substring(1) || 'accueil'; renderTeacherList(); populateClasseSelect(); loadMatieresForTeacherForm(); if(viewPlanningDateInput) { const today = new Date().toISOString().split('T')[0]; if (!viewPlanningDateInput.value) viewPlanningDateInput.value = today; } setActiveSection(initialSectionHash); }
    initializeApp();

    // === Exports pour onclick HTML ===
    window.app = { editTeacher, deleteTeacher, toggleSlotStatus, /* saveTimetable, */ resetTimetable, promptAddClass, addClass, promptEditClass, editClass, confirmDeleteClass, deleteClass, promptAddMatiere, addMatiere, promptEditMatiere, editMatiere, confirmDeleteMatiere, deleteMatiere, promptAddChapitre, addChapitre, promptEditChapitre, editChapitre, confirmDeleteChapitre, deleteChapitre, promptAddLecon, addLecon, promptEditLecon, /* editLecon, */ confirmDeleteLecon, deleteLecon, cancelBookingApi };

}); // Fin DOMContentLoaded Listener - FIN DU FICHIER